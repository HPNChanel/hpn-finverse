"""Add real balance savings features

Revision ID: 7310648e4e5a
Revises: cdf265fa9a9f
Create Date: 2025-06-15 11:47:34.815607

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '7310648e4e5a'
down_revision: Union[str, None] = 'cdf265fa9a9f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('savings_plans', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', sa.Enum('ACTIVE', 'COMPLETED', 'WITHDRAWN_EARLY', 'PAUSED', name='savingsplanstatus'), nullable=False, comment='Current status of the savings plan', server_default='ACTIVE'))
        batch_op.add_column(sa.Column('current_balance', sa.DECIMAL(precision=18, scale=8), nullable=False, comment='Current accumulated balance in the plan', server_default='0.00000000'))
        batch_op.add_column(sa.Column('total_contributed', sa.DECIMAL(precision=18, scale=8), nullable=False, comment='Total amount contributed to date', server_default='0.00000000'))
        batch_op.add_column(sa.Column('total_interest_earned', sa.DECIMAL(precision=18, scale=8), nullable=False, comment='Total interest earned to date', server_default='0.00000000'))
        batch_op.add_column(sa.Column('last_contribution_date', sa.DateTime(), nullable=True, comment='Date of last monthly contribution'))
        batch_op.add_column(sa.Column('next_contribution_date', sa.DateTime(), nullable=True, comment='Date of next scheduled contribution'))
        batch_op.add_column(sa.Column('early_withdrawal_penalty_rate', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Penalty rate for early withdrawal (default 10%)', server_default='0.1000'))
        batch_op.add_column(sa.Column('completion_date', sa.DateTime(), nullable=True, comment='Date when plan was completed or withdrawn'))
        batch_op.add_column(sa.Column('withdrawal_amount', sa.DECIMAL(precision=18, scale=8), nullable=True, comment='Amount withdrawn if plan was closed early'))

    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('related_savings_plan_id', sa.BigInteger(), nullable=True, comment='Related savings plan ID for savings transactions'))
        batch_op.add_column(sa.Column('savings_transaction_type', sa.String(length=50), nullable=True, comment='Type of savings transaction (saving_deposit, monthly_contribution, etc.)'))
        batch_op.add_column(sa.Column('note', sa.Text(), nullable=True, comment='Additional notes for the transaction'))
        batch_op.create_index(batch_op.f('ix_transactions_related_savings_plan_id'), ['related_savings_plan_id'], unique=False)
        batch_op.create_foreign_key(None, 'savings_plans', ['related_savings_plan_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_transactions_related_savings_plan_id'))
        batch_op.drop_column('note')
        batch_op.drop_column('savings_transaction_type')
        batch_op.drop_column('related_savings_plan_id')

    with op.batch_alter_table('savings_plans', schema=None) as batch_op:
        batch_op.drop_column('withdrawal_amount')
        batch_op.drop_column('completion_date')
        batch_op.drop_column('early_withdrawal_penalty_rate')
        batch_op.drop_column('next_contribution_date')
        batch_op.drop_column('last_contribution_date')
        batch_op.drop_column('total_interest_earned')
        batch_op.drop_column('total_contributed')
        batch_op.drop_column('current_balance')
        batch_op.drop_column('status')

    # ### end Alembic commands ###
